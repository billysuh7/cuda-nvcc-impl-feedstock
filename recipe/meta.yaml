{% set gcc_constraint = ">=6,<16.0a0" %}
{% set gcc_min_constraint = ">=6" %}
{% set name = "cuda-nvcc-impl" %}
{% set version = "13.0.88" %}
{% set cuda_version = "13.0" %}
{% set cuda_version_next_major = (cuda_version.split(".")[0]|int + 1)|string + ".0a0" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-ppc64le" %}  # [ppc64le]
{% set platform = "linux-sbsa" %}  # [aarch64 and arm_variant_type == "sbsa"]
{% set platform = "linux-aarch64" %}  # [aarch64 and arm_variant_type == "tegra"]
{% set platform = "windows-x86_64" %}  # [win]
{% set target_name = "x86_64-linux" %}  # [linux64]
{% set target_name = "ppc64le-linux" %}  # [ppc64le]
{% set target_name = "sbsa-linux" %}  # [aarch64 and arm_variant_type == "sbsa"]
{% set target_name = "aarch64-linux" %}  # [aarch64 and arm_variant_type == "tegra"]
{% set target_name = "x64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]
{% set exists = "which" %}  # [not win]
{% set exists = "where" %}  # [win]

{% set nvcc_sha256 = "48e35be3cfbf4b4fbc16828eaec8a7048ee789403049dc409f7b643d6259cf7a" %}  # [linux64]
{% set nvcc_sha256 = "01b01e10aa2662ad1b3aeab3317151d7d6d4a650eeade55ded504f6b7fced18e" %}  # [aarch64 and arm_variant_type == "sbsa"]
{% set nvcc_sha256 = "61760e24a44937c6c29a20ddea69067b4d3860ccd6a9a0564573f840d96e6c5f" %}  # [win]
#{% set nvcc_sha256 = "2eb267e6ebbe17e5ebc593bae8b83fa927c3e53cbf43ef5c614eff6c94053d10" %}  # [aarch64 and arm_variant_type == "tegra"]

{% set crt_sha256 = "5a3279a049ffc1cdb951c44cb95206acfdde9e9ae5e87825fc18d7e4a6878bb0" %}  # [linux64]
{% set crt_sha256 = "c03b92941ba7bf58a4992231ceb572477784ef450ce678f6545bed02392cae50" %}  # [aarch64 and arm_variant_type == "sbsa"]
{% set crt_sha256 = "ff413c89dbd96ed3b3dcfac923437de78acea32fb90309277197c8a127588112" %}  # [win]
#{% set crt_sha256 = "2eb267e6ebbe17e5ebc593bae8b83fa927c3e53cbf43ef5c614eff6c94053d10" %}  # [aarch64 and arm_variant_type == "tegra"]

{% set nvvm_sha256 = "17ef1665b63670887eeba7d908da5669fa8c66bb73b5b4c1367f49929c086353" %}  # [linux64]
{% set nvvm_sha256 = "f94feb1a0da0c55ceb5c7f039c1f0ffad5d162e0fedfb565efb87771187ddcfd" %}  # [aarch64 and arm_variant_type == "sbsa"]
{% set nvvm_sha256 = "6dda4a82d22a2c173a65c66b4b4c933e3424a56ce845e2864bdca9cc66e6c524" %}  # [win]
#{% set nvvm_sha256 = "2eb267e6ebbe17e5ebc593bae8b83fa927c3e53cbf43ef5c614eff6c94053d10" %}  # [aarch64 and arm_variant_type == "tegra"]

{% set libnvptxcompiler_sha256 = "3d2a51c6816278b90167550a7e0e9adfff9c8c919d87ef980565c0eb7fc23830" %}  # [linux64]
{% set libnvptxcompiler_sha256 = "fa47b2045245c5e86d41f9f13d571514f12a9f84eaaf0680087813fd71c3c0bd" %}  # [aarch64 and arm_variant_type == "sbsa"]
{% set libnvptxcompiler_sha256 = "863efcf751575f17111b99d0e553de954d3e8c9a91315505605601b0cc33fe4d" %}  # [win]
#{% set libnvptxcompiler_sha256 = "2eb267e6ebbe17e5ebc593bae8b83fa927c3e53cbf43ef5c614eff6c94053d10" %}  # [aarch64 and arm_variant_type == "tegra"]

package:
  name: cuda-nvcc-impl-split
  version: {{ version }}

source:
  - url: https://developer.download.nvidia.com/compute/cuda/redist/cuda_nvcc/{{ platform }}/cuda_nvcc-{{ platform }}-{{ version }}-archive.{{ extension }}
    sha256: {{ nvcc_sha256 }}
    folder: nvcc
    patches:
      - nvcc.profile.patch      # [linux]
      - nvcc.profile.patch.win  # [win]

  - url: https://developer.download.nvidia.com/compute/cuda/redist/cuda_crt/{{ platform }}/cuda_crt-{{ platform }}-{{ version }}-archive.{{ extension }}
    folder: crt
    sha256: {{ crt_sha256 }}

  - url: https://developer.download.nvidia.com/compute/cuda/redist/libnvvm/{{ platform }}/libnvvm-{{ platform }}-{{ version }}-archive.{{ extension }}
    folder: nvvm
    sha256: {{ nvvm_sha256 }}

  - url: https://developer.download.nvidia.com/compute/cuda/redist/libnvptxcompiler/{{ platform }}/libnvptxcompiler-{{ platform }}-{{ version }}-archive.{{ extension }}
    folder: libnvptxcompiler
    sha256: {{ libnvptxcompiler_sha256 }}

build:
  number: 0
  binary_relocation: false
  skip: true  # [osx or ppc64le]

requirements:
  build:
    - patchelf  # [linux]
    - cf-nvidia-tools 1.*  # [linux]

outputs:
  - name: cuda-nvcc-tools
    files:   # [linux]
      - bin/*                               # [linux]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ stdlib("c") }}
      host:
        - {{ pin_subpackage("cuda-crt-tools", exact=True) }}
        - {{ pin_subpackage("cuda-nvvm-tools", exact=True) }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - {{ pin_subpackage("cuda-crt-tools", exact=True) }}
        - {{ pin_subpackage("cuda-nvvm-tools", exact=True) }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      run_constrained:
        - gcc_impl_{{ target_platform }} {{ gcc_constraint }}  # [linux]
    test:
      requires:
        - patchelf                                                # [linux]
      files:
        - patchelf_exclude.txt                                    # [linux]
        - test-rpath-nvcc.sh                                      # [linux]
      commands:
        - test -f $PREFIX/bin/nvcc                                # [linux]
        - test -f $PREFIX/bin/ptxas                               # [linux]
        - bash test-rpath-nvcc.sh                                 # [linux]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: nvcc/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: Architecture independent part of CUDA NVCC compiler.
      description: |
        Compiler for CUDA applications.
      doc_url: https://docs.nvidia.com/cuda/index.html

  - name: cuda-nvcc-dev_{{ target_platform }}
    build:
      noarch: generic
      missing_dso_whitelist:   # [win]
        - "*/api-ms-win-core-winrt-*.dll"        # [win]
    run_exports:
      strong:
        - cuda-version >={{ cuda_version }},<{{ cuda_version_next_major }}
    files:
      - targets/{{ target_name }}/bin/nvcc                          # [linux]
      - targets/{{ target_name }}/include/fatbinary_section.h       # [linux]
      - Library\bin\*.exe                     # [win]
      - Library\bin\nvcc.profile              # [win]
      - Library\include\fatbinary_section.h   # [win]
    requirements:
      build:
        - {{ stdlib("c") }}
      host:
        - {{ pin_subpackage("cuda-crt-dev_" + target_platform, exact=True) }}
        - {{ pin_subpackage("cuda-nvcc-tools", exact=True) }}
        - {{ pin_subpackage("cuda-nvvm-dev_" + target_platform, exact=True) }}
        - {{ pin_subpackage("libnvptxcompiler-dev_" + target_platform, exact=True) }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - cuda-version {{ cuda_version }}
        - libgcc {{ gcc_min_constraint }}  # [linux]
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - {{ pin_subpackage("cuda-crt-dev_" + target_platform, exact=True) }}
        - {{ pin_subpackage("cuda-nvvm-dev_" + target_platform, exact=True) }}
        - {{ pin_subpackage("libnvptxcompiler-dev_" + target_platform, exact=True) }}
        - arm-variant * {{ arm_variant_type }}    # [aarch64]
        - libgcc {{ gcc_min_constraint }}  # [linux]
      run_constrained:
        - gcc_impl_{{ target_platform }} {{ gcc_constraint }}  # [linux]
    test:
      commands:
        - test -L $PREFIX/targets/{{ target_name }}/bin/nvcc      # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/fatbinary_section.h       # [linux]
        - if not exist %LIBRARY_BIN%\nvcc.exe exit 1                  # [win]
        - if not exist %LIBRARY_BIN%\nvcc.profile exit 1              # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: nvcc/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: Target architecture dependent parts of CUDA NVCC compiler.
      description: |
        Compiler for CUDA applications.
      doc_url: https://docs.nvidia.com/cuda/index.html

  - name: libnvptxcompiler-dev
    files:  # [linux]
      - lib/libnvptxcompiler_static.a  # [linux]
    requirements:
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_subpackage("libnvptxcompiler-dev_" ~ target_platform, exact=True) }}
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - arm-variant * {{ arm_variant_type }}    # [aarch64]
    test:
      commands:
        - test -f $PREFIX/targets/{{ target_name }}/lib/libnvptxcompiler_static.a     # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/nvPTXCompiler.h           # [linux]
        - test -L $PREFIX/lib/libnvptxcompiler_static.a                               # [linux]
        - if not exist %LIBRARY_LIB%\{{ target_name }}\nvptxcompiler_static.lib exit 1                  # [win]
        - if not exist %LIBRARY_INC%\nvPTXCompiler.h exit 1                           # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: libnvptxcompiler/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: Target architecture dependent parts of CUDA nvptxcompiler.
      description: |
        Compiler for CUDA applications.
      doc_url: https://docs.nvidia.com/cuda/index.html

  - name: libnvptxcompiler-dev_{{ target_platform }}
    build:
      noarch: generic
    files:
      - targets/{{ target_name }}/include/nvPTXCompiler.h           # [linux]
      - targets/{{ target_name }}/lib/libnvptxcompiler_static.a     # [linux]
      - Library\include\nvPTXCompiler.h                             # [win]
      - Library\lib\{{ target_name }}\nvptxcompiler_static.lib      # [win]
    requirements:
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - arm-variant * {{ arm_variant_type }}    # [aarch64]
    test:
      commands:
        - test -f $PREFIX/targets/{{ target_name }}/lib/libnvptxcompiler_static.a     # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/nvPTXCompiler.h           # [linux]
        - if not exist %LIBRARY_LIB%\{{ target_name }}\nvptxcompiler_static.lib exit 1                  # [win]
        - if not exist %LIBRARY_INC%\nvPTXCompiler.h exit 1                           # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: libnvptxcompiler/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: Target architecture dependent parts of CUDA nvptxcompiler.
      description: |
        Compiler for CUDA applications.
      doc_url: https://docs.nvidia.com/cuda/index.html

  - name: cuda-nvcc-impl
    build:
      # libnvvm.so gets corrupted by patchelf. No need to relocate as it is already relocatable
      binary_relocation: false
    run_exports:
      strong:
        - cuda-version >={{ cuda_version }},<{{ cuda_version_next_major }}
    requirements:
      host:
        - {{ pin_subpackage("cuda-nvvm-impl", exact=True) }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - cuda-cudart-dev
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_subpackage("cuda-nvcc-tools", exact=True) }}
        - {{ pin_subpackage("cuda-nvcc-dev_" + target_platform, exact=True) }}
        - {{ pin_subpackage("cuda-nvvm-impl", exact=True) }}
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - {{ pin_subpackage("libnvptxcompiler-dev", exact=True) }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - cuda-cudart-dev
      run_constrained:
        - gcc_impl_{{ target_platform }} {{ gcc_constraint }}  # [linux]
        - vc >={{ VCVER }}                      # [win]
    test:
      requires:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ stdlib("c") }}
        - gxx              # [linux]
        - gcc              # [linux]
        - vs{{ VSYEAR }}_win-64 =={{ CL_VERSION }}  # [win]
        - cmake
        - cuda-driver-dev  # [linux]
        - git              # [linux]
        - ninja
      files:
        - test.cu
        - CMakeLists.txt
        - run_nvcc_tests.sh   # [linux]
        - run_nvcc_tests.bat  # [win]
      commands:
        - test -L $PREFIX/lib/libnvptxcompiler_static.a                               # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/lib/libnvptxcompiler_static.a     # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/nvPTXCompiler.h           # [linux]
        - {{ exists }} nvcc
        - ./run_nvcc_tests.sh   # [linux]
        - .\run_nvcc_tests.bat  # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: nvcc/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: Compiler for CUDA applications.
      description: |
        Compiler for CUDA applications.
      doc_url: https://docs.nvidia.com/cuda/index.html

  - name: cuda-crt-tools
    files:
      - bin/crt          # [linux]
      - Library\bin\crt  # [win]  # stub is universal regardless of x64/arm64
    requirements:
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - arm-variant * {{ arm_variant_type }}    # [aarch64]
    test:
      commands:
        - test -d $PREFIX/bin/crt            # [linux]
        - test -f $PREFIX/bin/crt/link.stub  # [linux]
        - test -f $PREFIX/bin/crt/prelink.stub  # [linux]
        - if not exist %LIBRARY_BIN%\crt\link.stub exit 1  # [win]
        - if not exist %LIBRARY_BIN%\crt\prelink.stub exit 1  # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: crt/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: CUDA internal tools.
      description: |
        CUDA internal tools.
      doc_url: https://docs.nvidia.com/cuda/index.html

  - name: cuda-crt-dev_{{ target_platform }}
    build:
      noarch: generic
    run_exports:
      strong:
        - cuda-version >={{ cuda_version }},<{{ cuda_version_next_major }}
    files:
      - targets/{{ target_name }}/include/crt  # [linux]
      - Library\include\crt                    # [win]
    requirements:
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - arm-variant * {{ arm_variant_type }}    # [aarch64]
    test:
      commands:
        - test -f $PREFIX/targets/{{ target_name }}/include/crt/common_functions.h  # [linux]
        - if not exist %LIBRARY_INC%\crt\common_functions.h exit 1  # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: crt/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: CUDA internal headers.
      description: |
        CUDA internal headers.
      doc_url: https://docs.nvidia.com/cuda/index.html

  - name: cuda-nvvm-tools
    files:
      - nvvm/bin                # [linux]
      - nvvm/libdevice          # [linux]
      - Library\nvvm\bin        # [win]  # cicc.exe exists under bin\ while .dll exist under bin\x64
      - Library\nvvm\libdevice  # [win]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ stdlib("c") }}
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - arm-variant * {{ arm_variant_type }}    # [aarch64]
    test:
      requires:
        - patchelf                                                # [linux]
      files:
        - test-rpath-nvvm.sh                                      # [linux]
      commands:
        - test -d $PREFIX/nvvm                                    # [linux]
        - test -f $PREFIX/nvvm/bin/cicc                           # [linux]
        - bash test-rpath-nvvm.sh                                 # [linux]
        - if not exist %LIBRARY_PREFIX%\nvvm\bin\cicc.exe exit 1  # [win]
        - if not exist %LIBRARY_PREFIX%\nvvm\libdevice exit 1     # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: nvvm/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: Compiler for CUDA applications.
      description: |
        Compiler for CUDA applications.
      doc_url: https://docs.nvidia.com/cuda/index.html

  - name: cuda-nvvm-dev_{{ target_platform }}
    build:
      noarch: generic
    files:   # [linux]
      - targets/{{ target_name }}/nvvm  # [linux]
    requirements:
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - arm-variant * {{ arm_variant_type }}    # [aarch64]
    test:
      commands:
        - test -L $PREFIX/targets/{{ target_name }}/nvvm          # [linux]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: nvvm/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: Compiler for CUDA applications.
      description: |
        Compiler for CUDA applications.
      doc_url: https://docs.nvidia.com/cuda/index.html

  - name: cuda-nvvm-impl
    build:
      # libnvvm.so gets corrupted by patchelf. No need to relocate as it is already relocatable.
      binary_relocation: false
    files:
      - nvvm/include          # [linux]
      - nvvm/lib64            # [linux]
      - Library\nvvm\include  # [win]
      - Library\nvvm\lib\{{ target_name }}      # [win]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ stdlib("c") }}
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - arm-variant * {{ arm_variant_type }}    # [aarch64]
    test:
      requires:
        - patchelf                                                # [linux]
      files:
        - test-rpath-nvvm.sh                                      # [linux]
      commands:
        - test -d $PREFIX/nvvm/include  # [linux]
        - test -d $PREFIX/nvvm/lib64    # [linux]
        - bash test-rpath-nvvm.sh       # [linux]
        - if not exist %LIBRARY_PREFIX%\nvvm\include exit 1  # [win]
        - if not exist %LIBRARY_PREFIX%\nvvm\lib\{{ target_name }} exit 1      # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: nvvm/LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: Compiler for CUDA applications.
      description: |
        Compiler for CUDA applications.
      doc_url: https://docs.nvidia.com/cuda/index.html

about:
  home: https://developer.nvidia.com/cuda-toolkit
  license_file: LICENSE
  license: LicenseRef-NVIDIA-End-User-License-Agreement
  license_url: https://docs.nvidia.com/cuda/eula/index.html
  summary: Compiler for CUDA applications.
  description: |
    Compiler for CUDA applications.
  doc_url: https://docs.nvidia.com/cuda/index.html

extra:
  feedstock-name: cuda-nvcc-impl
  recipe-maintainers:
    - conda-forge/cuda
